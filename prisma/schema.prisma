
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  name     String?
  email    String @unique
  password String

  avatarImg String?
  role      Role     @default(user)
  subscription Subscription?
  details   UserDetails?

  goals Goal[]
  workouts Workout[]
  chats Chat[]
}

model UserDetails {
  id            String    @id @default(cuid()) @map("_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")

  age       Int?
  gender    String?
  height    Float?
  weight    Float?

  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id") @unique
}

model Subscription {
  id            String    @id @default(cuid()) @map("_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")

  subscriptionType     SubscriptionType @default(free) @map("subscription_type")
  description          String?
  descriptionRequests  Int          @default(10)
  chatRequests         Int          @default(10)

  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id") @unique
}

model Chat {
  id            String      @id @default(cuid()) @map("_id")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @default(now()) @map("updated_at")

  messages      Message[]

  user          User        @relation(fields: [userId], references: [id])
  userId        String      @map("user_id")
}

model Message {
  id            String      @id @default(cuid()) @map("_id")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @default(now()) @map("updated_at")

  content          String?
  role          String
  chat          Chat        @relation(fields: [chatId], references: [id])
  chatId        String      @map("chat_id")
}




model Workout {
  id            String    @id @default(cuid()) @map("_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")

  workoutImg    String?
  title         String
  description   String?
  level String?
  type String[]
  duration Int?
  tags String[]
  completed Boolean? @default(false)
  isFavorite Boolean? @default(false)

  exercises        Json
  workoutCompleted        WorkoutCompleted[]


  user          User      @relation(fields: [userId], references: [id])
  userId        String    @map("user_id")
}



model WorkoutCompleted {
  id           String    @id @default(cuid()) @map("_id")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @map("updated_at")

  totalSeconds Int
  completedAt  DateTime  @map("completed_at")

  workout      Workout   @relation(fields: [workoutId], references: [id])
  workoutId    String    @map("workout_id")
}

model Goal {
  id          String    @id @default(cuid()) @map("_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")

  title       String
  description String?
  deadline    DateTime?
  completed   Boolean?   @default(false)

  user        User      @relation(fields: [userId], references: [id])
  userId      String    @map("user_id")
}

enum SubscriptionType {
  free
  standart
  premium
}

enum Role {
  user
  admin
}
